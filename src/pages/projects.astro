---
import Layout from "../layouts/Layout.astro";

type Project = {
  id: string;
  title: string;
  subtitle?: string;
  logo?: string;
  about: string;
  howto?: string;
  store?: string | null;
  play?: string | null;
};

const projects: Project[] = [
  {
    id: "foc",
    title: "Furthest On Circle",
    logo: "/icons/FOC.png",
    about:
      "A small tactics sandbox exploring positioning, timing, and resource trade-offs in a minimalist battlefield.",
    howto:
      "Pick a scenario, deploy units, and try to control space efficiently. Use cover, timing, and arcs to survive longer.",
    store: "https://play.google.com/store/apps/details?id=com.ZanyInc.FOC",
    play: "https://zachscholz.com/coding/foc/",
  },
  {
    id: "tone",
    title: "Tone - A Color Game",
    logo: "/icons/Tone.png",
    about:
      "Guess the CMYK percentages to match the target color in as few guesses as possible. Simple rules, surprisingly deep intuition.",
    howto:
      "Enter your CMYK guess; compare against the target; iterate to minimize guesses. Learn how colors blend as you play.",
    store: "https://play.google.com/store/apps/details?id=com.ZanyInc.ToneRemastered",
    play: "https://zachscholz.com/coding/tone/",
  },
  {
    id: "pantry",
    title: "Pantry Planner",
    logo: "/icons/Pantry.png",
    about:
      "Lightweight pantry + meal planning utility to reduce waste and plan quick, repeatable meals from what you already have.",
    howto:
      "Add items you keep on hand, track low stock, and build quick meal templates that auto-suggest a grocery list.",
    store: "https://play.google.com/store/apps/details?id=com.zanyinc.pantrymealplanner.pantrymealplanner",
    play: "/coding/pantry-planner",
  },
  {
    id: "sheepshead",
    title: "Sheepshead",
    logo: "/icons/Sheepshead.png",
    about:
      "A remastered Sheepshead with clean visuals and crisp interactions. Play quick hands and practice strategy.",
    howto:
      "Win tricks using trump and follow suit when possible. Choose to pick or pass, then play out the hand to maximize points.",
    store: "https://play.google.com/store/apps/details?id=com.ZanyInc.SheepsheadRemastered",
    play: "https://zachscholz.com/coding/sheepshead/",
  },
];
---
<Layout title="Projects — Zach Scholz" description="Side projects: games, sims, and tools.">
  <section class="projects-wrap content">
    <div class="spacer-md" aria-hidden="true"></div>

    <section class="accordion" aria-label="Side projects">
      {projects.map((p) => (
        <div class="acc" id={`acc-proj-${p.id}`}>
          <button
            class="acc-summary"
            type="button"
            aria-expanded="false"
            aria-controls={`panel-proj-${p.id}`}
            id={`btn-proj-${p.id}`}
          >
            <span class="acc-toggle" aria-hidden="true"></span>
            <span class="acc-title">{p.title}</span>
          </button>

          <div
            class="acc-panel"
            id={`panel-proj-${p.id}`}
            role="region"
            aria-labelledby={`btn-proj-${p.id}`}
          >
            <!-- About row: big logo + about text inline -->
            <div class="about-row">
              {p.logo ? <img class="about-logo" src={p.logo} alt={`${p.title} logo`} /> : null}
              <p class="about-text">{p.about}</p>
            </div>

            <!-- How to Play -->
            {p.howto && (
              <div class="block">
                <h4 class="subhead">How to Play</h4>
                <p class="muted">{p.howto}</p>
              </div>
            )}

            <!-- Links -->
            <ul class="stack gray-hover links" aria-label={`${p.title} links`}>
              {p.store && (
                <li class="stack-item hoverable">
                  <a href={p.store} target="_blank" rel="noopener">Google Play</a>
                </li>
              )}
              {p.play && (
                <li class="stack-item hoverable">
                  <a href={p.play} target="_blank" rel="noopener">Play Now ↗</a>
                </li>
              )}
            </ul>
          </div>
        </div>
      ))}
    </section>
  </section>

  <!-- Accordion JS (same behavior as Research) -->
  <script type="module">
    const accRoot = document.querySelector('.accordion');
    if (!accRoot) throw new Error('Accordion root not found');

    const items   = Array.from(accRoot.querySelectorAll('.acc'));
    const buttons = items.map(i => i.querySelector('.acc-summary'));
    const panels  = items.map(i => i.querySelector('.acc-panel'));

    function getPinOffset() {
      const fixedHeader = document.querySelector('.topbar');
      return fixedHeader ? Math.max(0, fixedHeader.getBoundingClientRect().bottom) : 0;
    }

    function pinAccordionTop({ settle = true } = {}) {
      const targetTop = getPinOffset();
      let tries = 0;
      let last = null;
      const step = () => {
        const nowTop = accRoot.getBoundingClientRect().top;
        const delta  = nowTop - targetTop;
        if (delta) window.scrollBy({ top: delta, left: 0 });
        if (!settle) return;
        if (last !== null && Math.abs(nowTop - last) < 0.25) return;
        last = nowTop;
        if (++tries < 16) requestAnimationFrame(step);
      };
      requestAnimationFrame(step);
    }

    function openPanel(panel) {
      panel.hidden = false;
      panel.style.display = 'block';
      const startHeight = panel.offsetHeight;
      const target = panel.scrollHeight;
      panel.style.height = startHeight + 'px';
      panel.getBoundingClientRect();
      panel.style.height = target + 'px';
      panel.classList.add('animating');
      panel.addEventListener('transitionend', function done(ev){
        if (ev.propertyName !== 'height') return;
        panel.removeEventListener('transitionend', done);
        panel.classList.remove('animating');
        panel.style.height = 'auto';
      });
    }

    function closePanel(panel) {
      const current = panel.offsetHeight;
      panel.style.height = current + 'px';
      panel.getBoundingClientRect();
      panel.style.height = '0px';
      panel.classList.add('animating');
      panel.addEventListener('transitionend', function done(ev){
        if (ev.propertyName !== 'height') return;
        panel.removeEventListener('transitionend', done);
        panel.classList.remove('animating');
        panel.style.display = 'none';
        panel.hidden = true;
      });
    }

    // INITIAL STATE: start collapsed
    let openIndex = -1;
    panels.forEach(p => { p.style.display = 'none'; p.hidden = true; p.style.height = '0px'; });

    function setOpen(idx) {
      items.forEach((_, i) => {
        const shouldOpen = i === idx;
        buttons[i].setAttribute('aria-expanded', String(shouldOpen));
        const p = panels[i];
        if (shouldOpen) {
          if (p.hidden || p.style.display === 'none' || p.style.height === '0px') openPanel(p);
        } else {
          if (!p.hidden && p.style.display !== 'none' && p.style.height !== '0px') closePanel(p);
        }
      });
      openIndex = idx;
    }

    function activate(i, evt) {
      if (evt) evt.preventDefault();
      const next = (openIndex === i) ? -1 : i;
      setOpen(next);
      pinAccordionTop({ settle: true });
    }

    // wire up interactions
    buttons.forEach((btn, i) => {
      btn.addEventListener('click', (e) => activate(i, e));
      btn.addEventListener('keydown', (e) => {
        if (e.key === ' ' || e.key === 'Enter') activate(i, e);
      });
    });

    // keep pinned while resizing
    const ro = new ResizeObserver(() => {
      if (openIndex !== -1) pinAccordionTop({ settle: false });
    });
    ro.observe(accRoot);
  </script>

  <style>
    .projects-wrap{display:grid;gap:12px;justify-items:start;align-items:start;margin-inline:auto}

    .spacer-md{ height: clamp(24px, 6vh, 64px); width: 100%; }
    .muted{color:var(--muted)}

    .accordion{
      display:grid; gap:12px; justify-items:start;
      width:100%; margin:0;
    }
    .acc{ width:100%; background:transparent; }

    /* Header: grid so '+' aligns with the first line of a wrapped title */
    .acc-summary{
      width:100%;
      display:grid;
      grid-template-columns: 1.25rem 1fr; /* icon + title */
      align-items:start;                  /* align to first line */
      justify-content:start;
      gap:0.6rem;
      padding:6px 0;
      cursor:pointer; user-select:none;
      color:var(--muted); font-weight:700;
      text-align:left; background:none; border:0;
      font-size:var(--body-size);
    }
    .acc-summary:focus-visible{outline:2px solid var(--border);outline-offset:4px;border-radius:8px}

    .acc-toggle{
      width:1.25rem;
      text-align:center;
      font:inherit;
      line-height:1;
      margin-top:0.1em; /* tiny optical tweak */
      color: var(--text);
    }
    .acc-toggle::before{content:'+'}
    .acc-summary[aria-expanded="true"] .acc-toggle::before{content:'–'}

    .acc-title {
      margin: 0; 
      font-size: var(--h1-size);
      font-weight: 1000;
      letter-spacing: -0.01em;
      line-height: calc(var(--line) - .15);
      color: var(--text);
    }

    /* Panel: indent by the icon+gap so body aligns with title text column */
    .acc-panel{
      padding-left: calc(1.25rem + 0.6rem);
      margin:0;
      display:block;
      height:0;
      overflow:hidden;
      overflow-anchor:none;
      transition: height 220ms ease;
      font-size:var(--body-size);
      line-height:1.45;
      color:var(--muted);
    }

    .block{ width:100%; margin:0; display:grid; gap:.35rem }
    .block p { margin:0 }

    .about-row{
      display:flex; align-items:center; gap:.8rem;
      margin: .1rem 0 .25rem 0;
    }
    .about-logo{
      width:64px; height:64px; border-radius:12px; display:block;
    }
    .about-text{
      margin:0; color:var(--text);
    }

    .subhead{
      margin:.25rem 0 0; font-size:1em; color:var(--text);
    }

    .stack{list-style:none;padding:0;margin:.35rem 0 0}
    .stack-item{padding:0}
    .accordion a,
    .accordion a:visited{ color:inherit; text-decoration:none; }
    .accordion a:hover{ text-decoration:underline; }

    .gray-hover:hover .hoverable {
      filter: grayscale(1) brightness(.88);
      opacity: .7;
      transition: filter 160ms ease, opacity 160ms ease;
    }
    .gray-hover .hoverable:hover {
      filter: none;
      opacity: 1;
    }

    .links{ margin-top:.25rem }
  </style>
</Layout>

---
import Layout from "../layouts/Layout.astro";

const papers = [
  {
    title:
      "Optimizing Prepositioning of Equipment and Personnel for Los Angeles County Fire Department to Fight Wildland Fires",
    authors: "Gerald Brown, Robert A. Koyak, Javier Salmerón, Zachary Scholz",
    venue: "INFORMS Journal on Applied Analytics (2021)",
    pdf: "/papers/Scholz NPS Thesis.pdf",
    external: "https://pubsonline.informs.org/doi/abs/10.1287/inte.2021.1084",
    summary:
      "Decision support for LACoFD to pre-position wildfire resources on red-flag days; prediction + optimization adopted by the department.",
  },
  {
    title:
      "Evaluation of HEU surrogate sources for use in training and modeling",
    authors: "Z. Scholz, M. Millett, M. Schell",
    venue: "NIM A (2018)",
    pdf: "/papers/Scholz USNA Thesis.pdf",
    external:
      "https://www.sciencedirect.com/science/article/abs/pii/S0168900218312002",
    summary:
      "Prompt-gamma surrogates (e.g., Gd) for safe, low-cost HEU detection training; strong spectral match around 186 keV.",
  },
];
---
<Layout title="Research — Zach Scholz" description="Optimization, geospatial analytics, decision-support.">
  <section class="research-wrap content" style="display:grid;gap:12px;justify-items:start;align-items:start;margin-inline:auto">
    <div class="spacer-md" aria-hidden="true"></div>

    <section class="accordion" aria-label="Research papers">
      {papers.map((p, i) => (
        <div class="acc" id={`acc-paper-${i}`}>
          <button
            class="acc-summary"
            type="button"
            aria-expanded="false"
            aria-controls={`panel-paper-${i}`}
            id={`btn-paper-${i}`}
          >
            <span class="acc-toggle" aria-hidden="true"></span>
            <h1 class="acc-title">{p.title}</h1>
          </button>

          <div
            class="acc-panel"
            id={`panel-paper-${i}`}
            role="region"
            aria-labelledby={`btn-paper-${i}`}
          >
            <p>{p.authors}</p>
            <p><em>{p.venue}</em></p>
            <p class="muted">{p.summary}</p>

            <ul class="stack gray-hover links" aria-label="Paper links" style="margin-top:.25rem">
              <li class="stack-item hoverable">
                <a href={encodeURI(p.pdf)} target="_blank" rel="noopener">PDF</a>
              </li>
              <li class="stack-item hoverable">
                <a href={p.external} target="_blank" rel="noopener">Publisher ↗</a>
              </li>
            </ul>
          </div>
        </div>
      ))}
    </section>
  </section>

  <!-- Accordion JS -->
  <script type="module">
    const accRoot = document.querySelector('.accordion');
    if (!accRoot) throw new Error('Accordion root not found');

    const items   = Array.from(accRoot.querySelectorAll('.acc'));
    const buttons = items.map(i => i.querySelector('.acc-summary'));
    const panels  = items.map(i => i.querySelector('.acc-panel'));

    function getPinOffset() {
      const fixedHeader = document.querySelector('.topbar');
      return fixedHeader ? Math.max(0, fixedHeader.getBoundingClientRect().bottom) : 0;
    }

    function pinAccordionTop({ settle = true } = {}) {
      const targetTop = getPinOffset();
      let tries = 0;
      let last = null;
      const step = () => {
        const nowTop = accRoot.getBoundingClientRect().top;
        const delta  = nowTop - targetTop;
        if (delta) window.scrollBy({ top: delta, left: 0 });
        if (!settle) return;
        if (last !== null && Math.abs(nowTop - last) < 0.25) return;
        last = nowTop;
        if (++tries < 16) requestAnimationFrame(step);
      };
      requestAnimationFrame(step);
    }

    function openPanel(panel) {
      panel.hidden = false;
      panel.style.display = 'block';
      const startHeight = panel.offsetHeight;
      const target = panel.scrollHeight;
      panel.style.height = startHeight + 'px';
      panel.getBoundingClientRect();
      panel.style.height = target + 'px';
      panel.classList.add('animating');
      panel.addEventListener('transitionend', function done(ev){
        if (ev.propertyName !== 'height') return;
        panel.removeEventListener('transitionend', done);
        panel.classList.remove('animating');
        panel.style.height = 'auto';
      });
    }

    function closePanel(panel) {
      const current = panel.offsetHeight;
      panel.style.height = current + 'px';
      panel.getBoundingClientRect();
      panel.style.height = '0px';
      panel.classList.add('animating');
      panel.addEventListener('transitionend', function done(ev){
        if (ev.propertyName !== 'height') return;
        panel.removeEventListener('transitionend', done);
        panel.classList.remove('animating');
        panel.style.display = 'none';
        panel.hidden = true;
      });
    }

    // INITIAL STATE
    let openIndex = -1;
    panels.forEach(p => { p.style.display = 'none'; p.hidden = true; p.style.height = '0px'; });

    function setOpen(idx) {
      items.forEach((_, i) => {
        const shouldOpen = i === idx;
        buttons[i].setAttribute('aria-expanded', String(shouldOpen));
        const p = panels[i];
        if (shouldOpen) {
          if (p.hidden || p.style.display === 'none' || p.style.height === '0px') openPanel(p);
        } else {
          if (!p.hidden && p.style.display !== 'none' && p.style.height !== '0px') closePanel(p);
        }
      });
      openIndex = idx;
    }

    function activate(i, evt) {
      if (evt) evt.preventDefault();
      const next = (openIndex === i) ? -1 : i;
      setOpen(next);
      pinAccordionTop({ settle: true });
    }

    buttons.forEach((btn, i) => {
      btn.addEventListener('click', (e) => activate(i, e));
      btn.addEventListener('keydown', (e) => {
        if (e.key === ' ' || e.key === 'Enter') activate(i, e);
      });
    });

    const ro = new ResizeObserver(() => {
      if (openIndex !== -1) pinAccordionTop({ settle: false });
    });
    ro.observe(accRoot);
  </script>
</Layout>
